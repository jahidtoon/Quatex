generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model currency_pairs {
  id              String     @id @default(uuid())
  base            String
  quote           String
  symbol          String     @unique
  display         String?
  provider        String?
  provider_symbol String?
  price_decimals  Int?
  status          PairStatus @default(ACTIVE)
  payout          Int?
  latest_price    Decimal?
  last_updated    DateTime?
  isDeleted       Boolean    @default(false)
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt

  @@index([status])
  @@index([isDeleted])
  @@index([symbol])
}

model currency_rates {
  id              String   @id @default(uuid())
  from_currency   String
  to_currency     String
  rate            Decimal
  min_amount      Decimal  @default(1)
  max_amount      Decimal  @default(1000000)
  is_active       Boolean  @default(true)
  last_updated    DateTime @default(now())
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@unique([from_currency, to_currency])
  @@index([from_currency])
  @@index([to_currency])
  @@index([is_active])
}

model forex_candles {
  id         String   @id @default(uuid())
  symbol     String
  interval   String
  time       DateTime
  open       Decimal
  high       Decimal
  low        Decimal
  close      Decimal
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([symbol, interval, time])
  @@index([symbol, interval, time])
}

model users {
  id               String             @id @default(uuid())
  name             String?
  first_name       String?
  last_name        String?
  email            String             @unique
  password_hash    String?
  phone            String?
  country          String?
  date_of_birth    String?
  address          String?
  city             String?
  postal_code      String?
  balance          Decimal?           @default(0)
  is_verified      Boolean            @default(false)
  is_admin         Boolean            @default(false)
  is_suspended     Boolean            @default(false)
  avatar_url       String?
  preferred_currency String?          @default("USD")
  created_at       DateTime           @default(now())
  updated_at       DateTime           @updatedAt
  demo_balance     Decimal?           @default(10000)
  tournament_balance Decimal?         @default(0)
  chat_messages    chat_messages[]
  deposits         deposits[]
  leaderboard      leaderboard[]
  settings         settings[]
  support_messages support_messages[]
  trades           trades[]
  withdrawals      withdrawals[]
  deposit_sessions deposit_sessions[]
  wallet_ledger    wallet_ledger[]
  // Back-rel for affiliate commissions where this user is the referral
  affiliate_commissions_referral affiliate_commissions[] @relation("affiliate_commission_referral")
  // Affiliate backlink (optional): which affiliate referred this user
  referred_by_affiliate_id String?
  affiliate_referrals       affiliate_referrals[]
  // P2P back-relations
  p2p_offers             p2p_offers[]
  user_payment_methods   user_payment_methods[]
  p2p_maker_orders       p2p_orders[]           @relation("p2p_maker")
  p2p_taker_orders       p2p_orders[]           @relation("p2p_taker")
  p2p_messages_sent      p2p_messages[]         @relation("p2p_message_sender")
  p2p_disputes_raised    p2p_disputes[]         @relation("p2p_dispute_raised_by")
  p2p_ratings_from       p2p_ratings[]          @relation("p2p_from_user")
  p2p_ratings_to         p2p_ratings[]          @relation("p2p_to_user")
  tournament_participants tournament_participants[]
}

model deposits {
  id         String   @id @default(uuid())
  user_id    String?
  amount     Decimal?
  method     String?
  status     String?
  created_at DateTime @default(now())
  users      users?   @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model withdrawals {
  id           String   @id @default(uuid())
  user_id      String?
  amount       Decimal?
  method       String?
  account_info Json?
  status       String?
  created_at   DateTime @default(now())
  users        users?   @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model trades {
  id           String    @id @default(uuid())
  user_id      String?
  symbol       String?
  amount       Decimal?
  direction    String?
  open_time    DateTime?
  close_time   DateTime?
  result       String?
  status       String?   @default("open")
  entry_price  Decimal?
  payout       Decimal?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @default(now()) @updatedAt
  account_type String?   @default("live")
  users        users?    @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([user_id, result])
  @@index([user_id, status])
  @@index([user_id, open_time])
}

model leaderboard {
  id         String   @id @default(uuid())
  user_id    String?
  amount     Decimal?
  rank       Int?
  updated_at DateTime @default(now())
  users      users?   @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

enum TournamentStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum TournamentType {
  PROFIT_BASED
  WIN_RATE
  VOLUME_BASED
  MIXED
}

model tournaments {
  id                  String             @id @default(uuid())
  title               String
  description         String?
  type                TournamentType     @default(PROFIT_BASED)
  status              TournamentStatus   @default(UPCOMING)
  entry_fee           Decimal            @default(0)
  max_participants    Int?
  start_date          DateTime
  end_date            DateTime
  total_prize_pool    Decimal            @default(0)
  current_participants Int               @default(0)
  rules               String?
  banner_url          String?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  
  participants        tournament_participants[]
  prizes              tournament_prizes[]
  leaderboard         tournament_leaderboard[]
  
  @@index([status])
  @@index([start_date])
  @@index([end_date])
}

model tournament_participants {
  id              String    @id @default(uuid())
  tournament_id   String
  user_id         String
  entry_paid      Decimal   @default(0)
  joined_at       DateTime  @default(now())
  starting_balance Decimal  @default(0)
  current_balance Decimal   @default(0)
  total_trades    Int       @default(0)
  winning_trades  Int       @default(0)
  total_profit    Decimal   @default(0)
  total_volume    Decimal   @default(0)
  rank            Int?
  prize_won       Decimal?  @default(0)
  is_disqualified Boolean   @default(false)
  
  tournament      tournaments @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  user            users       @relation(fields: [user_id], references: [id])
  
  @@unique([tournament_id, user_id])
  @@index([tournament_id])
  @@index([user_id])
  @@index([rank])
}

model tournament_prizes {
  id            String   @id @default(uuid())
  tournament_id String
  rank          Int
  prize_amount  Decimal
  prize_type    String   @default("CASH") // CASH, BONUS, etc
  description   String?
  
  tournament    tournaments @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  
  @@unique([tournament_id, rank])
  @@index([tournament_id])
}

model tournament_leaderboard {
  id              String   @id @default(uuid())
  tournament_id   String
  user_id         String
  rank            Int
  total_profit    Decimal  @default(0)
  total_trades    Int      @default(0)
  win_rate        Decimal  @default(0)
  total_volume    Decimal  @default(0)
  updated_at      DateTime @updatedAt
  
  tournament      tournaments @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  
  @@unique([tournament_id, user_id])
  @@index([tournament_id, rank])
  @@index([user_id])
}

model support_messages {
  id         String   @id @default(uuid())
  user_id    String?
  name       String?
  email      String?
  subject    String?
  message    String?
  created_at DateTime @default(now())
  users      users?   @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model chat_messages {
  id      String   @id @default(uuid())
  user_id String?
  sender  String?
  message String?
  time    DateTime @default(now())
  users   users?   @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

model settings {
  id            String   @id @default(uuid())
  user_id       String?
  notifications Boolean? @default(false)
  private       Boolean? @default(false)
  users         users?   @relation(fields: [user_id], references: [id])

  @@index([user_id])
}

enum PairStatus {
  ACTIVE
  PAUSED
  DISABLED
  INACTIVE
}

// -------------------- Crypto Deposit System Additions --------------------

enum DepositSessionStatus {
  PENDING
  DETECTED
  CONFIRMED
  PARTIAL
  EXPIRED
  LATE_CONFIRMED
  FAILED
}

enum LedgerType {
  DEPOSIT
  WITHDRAWAL
  ADJUST
  // P2P specific ledger entries
  P2P_ESCROW_HOLD
  P2P_ESCROW_RELEASE
  P2P_ESCROW_REFUND
  P2P_FEE
}

model crypto_assets {
  id               String           @id @default(uuid())
  symbol           String           // BTC, ETH, USDT
  network          String           // bitcoin, ethereum, tron, bsc
  display_name     String?
  contract         String?          // token contract (ERC20/TRC20/BEP20)
  decimals         Int              @default(18)
  min_deposit      Decimal          @default(0)
  is_active        Boolean          @default(true)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  deposit_sessions deposit_sessions[]

  @@unique([symbol, network])
  @@index([is_active])
}

model deposit_sessions {
  id                String               @id @default(uuid())
  user_id           String
  crypto_asset_id   String
  address           String
  derivation_path   String?
  memo_tag          String?
  amount_expected   Decimal?
  fiat_locked_usd   Decimal?
  rate_source       String?
  status            DepositSessionStatus @default(PENDING)
  tx_hash           String?              @unique
  detected_amount   Decimal?
  confirmations     Int?                 @default(0)
  min_confirmations Int                  @default(1)
  is_late           Boolean              @default(false)
  expires_at        DateTime
  created_at        DateTime             @default(now())
  updated_at        DateTime             @updatedAt

  users         users         @relation(fields: [user_id], references: [id])
  crypto_assets crypto_assets @relation(fields: [crypto_asset_id], references: [id])

  @@index([user_id])
  @@index([status])
  @@index([expires_at])
  @@index([crypto_asset_id])
}

model wallet_ledger {
  id          String     @id @default(uuid())
  user_id     String
  type        LedgerType
  asset       String     // internal unit e.g. USD or 'BTC'
  amount      Decimal
  meta        Json?
  created_at  DateTime   @default(now())

  users users @relation(fields: [user_id], references: [id])

  @@index([user_id])
  @@index([type])
}

// ------------------ End Crypto Deposit System Additions -------------------

// -------------------- P2P Trading System Additions --------------------

enum P2POrderSide {
  BUY
  SELL
}

enum P2POfferStatus {
  ACTIVE
  PAUSED
  CLOSED
}

enum P2PTradeStatus {
  PENDING
  WAITING_PAYMENT
  PAID
  ESCROW_HELD
  RELEASED
  CANCELED
  DISPUTED
  REFUNDED
  EXPIRED
}

enum P2PDisputeStatus {
  OPEN
  RESOLVED
  CANCELED
}

enum PaymentMethodType {
  BKASH
  NAGAD
  BANK
  CARDBANK
  OTHERS
}

// -------------------- Billing / Payment Templates --------------------

model payment_method_templates {
  id        String             @id @default(uuid())
  title     String
  type      PaymentMethodType
  fields    Json               // e.g., [{ key: 'number', label: 'Bkash Number', required: true }]
  currency  String             // e.g., BDT, USD
  country   String             // e.g., Bangladesh, United States
  is_active Boolean            @default(true)
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt

  @@index([type])
  @@index([country])
  @@index([currency])
}

model p2p_offers {
  id               String          @id @default(uuid())
  user_id          String
  side             P2POrderSide
  asset_symbol     String
  crypto_asset_id  String?
  fiat_currency    String
  price_type       String          // FIXED or FLOATING
  fixed_price      Decimal?
  margin_percent   Decimal?
  min_amount_asset Decimal
  max_amount_asset Decimal
  min_limit_fiat   Decimal
  max_limit_fiat   Decimal
  terms            String?
  auto_reply       String?
  status           P2POfferStatus  @default(ACTIVE)
  total_trades     Int             @default(0)
  completion_rate  Int             @default(100) // percent
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt

  users            users           @relation(fields: [user_id], references: [id])
  payment_methods  p2p_offer_payment_methods[]
  orders           p2p_orders[]

  @@index([user_id])
  @@index([status])
  @@index([asset_symbol, fiat_currency, side])
}

model user_payment_methods {
  id          String             @id @default(uuid())
  user_id     String
  type        PaymentMethodType
  label       String?
  details     Json?
  is_verified Boolean            @default(false)
  is_active   Boolean            @default(true)
  created_at  DateTime           @default(now())
  updated_at  DateTime           @updatedAt

  users       users              @relation(fields: [user_id], references: [id])
  offers      p2p_offer_payment_methods[]

  @@index([user_id])
  @@index([type])
}

model p2p_offer_payment_methods {
  id                 String               @id @default(uuid())
  offer_id           String
  payment_method_id  String

  offer              p2p_offers           @relation(fields: [offer_id], references: [id])
  payment_method     user_payment_methods @relation(fields: [payment_method_id], references: [id])

  @@unique([offer_id, payment_method_id])
}

model p2p_orders {
  id               String          @id @default(uuid())
  offer_id         String
  maker_id         String
  taker_id         String
  side             P2POrderSide
  asset_symbol     String
  fiat_currency    String
  price            Decimal
  amount_asset     Decimal
  amount_fiat      Decimal
  status           P2PTradeStatus  @default(PENDING)
  escrow_held      Boolean         @default(false)
  escrow_ledger_id String?
  reference_code   String?
  meta             Json?
  expires_at       DateTime?
  paid_at          DateTime?
  released_at      DateTime?
  canceled_at      DateTime?
  maker_confirmed  Boolean         @default(false)
  taker_confirmed  Boolean         @default(false)
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt

  offer            p2p_offers      @relation(fields: [offer_id], references: [id])
  maker            users           @relation("p2p_maker", fields: [maker_id], references: [id])
  taker            users           @relation("p2p_taker", fields: [taker_id], references: [id])
  messages         p2p_messages[]
  disputes         p2p_disputes[]
  ratings          p2p_ratings[]

  @@index([maker_id])
  @@index([taker_id])
  @@index([status])
}

model p2p_messages {
  id          String   @id @default(uuid())
  order_id    String
  sender_id   String
  message     String
  attachments Json?
  created_at  DateTime @default(now())

  order       p2p_orders @relation(fields: [order_id], references: [id])
  sender      users      @relation("p2p_message_sender", fields: [sender_id], references: [id])

  @@index([order_id])
}

model p2p_disputes {
  id                   String           @id @default(uuid())
  order_id             String
  raised_by_user_id    String
  reason               String?
  description          String?
  status               P2PDisputeStatus @default(OPEN)
  resolved_by_admin_id String?
  resolution_note      String?
  resolved_at          DateTime?
  attachments          Json?
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt

  order                p2p_orders       @relation(fields: [order_id], references: [id])
  raised_by            users            @relation("p2p_dispute_raised_by", fields: [raised_by_user_id], references: [id])

  @@index([order_id])
  @@index([status])
}

model p2p_ratings {
  id           String   @id @default(uuid())
  order_id     String
  from_user_id String
  to_user_id   String
  stars        Int
  comment      String?
  created_at   DateTime @default(now())

  order        p2p_orders @relation(fields: [order_id], references: [id])
  from_user    users      @relation("p2p_from_user", fields: [from_user_id], references: [id])
  to_user      users      @relation("p2p_to_user", fields: [to_user_id], references: [id])

  @@index([to_user_id])
}

// ------------------ End P2P Trading System Additions -------------------

// -------------------- Affiliate Program Additions --------------------

model affiliates {
  id              String   @id @default(uuid())
  name            String
  email           String   @unique
  password_hash   String
  phone           String?
  country         String?
  status          String   @default("Active") // Active, Suspended
  tier            String   @default("Bronze")
  commission_rate Int      @default(30) // percent
  referral_code   String   @unique
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  referrals       affiliate_referrals[]
  commissions     affiliate_commissions[]
  payouts         affiliate_payouts[]
}

model affiliate_referrals {
  id            String   @id @default(uuid())
  affiliate_id  String
  user_id       String
  status        String   @default("Active") // Active, Pending
  total_deposit Decimal  @default(0)
  total_trades  Int      @default(0)
  earnings      Decimal  @default(0)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  affiliate affiliates @relation(fields: [affiliate_id], references: [id])
  user      users      @relation(fields: [user_id], references: [id])

  @@unique([affiliate_id, user_id])
  @@index([affiliate_id])
  @@index([user_id])
}

model affiliate_commissions {
  id               String   @id @default(uuid())
  affiliate_id     String
  referral_user_id String?
  type             String   // REFERRAL_DEPOSIT, TRADE_VOLUME, BONUS
  rate             Int      @default(30)
  amount           Decimal  @default(0)
  status           String   @default("pending") // pending, paid
  description      String?
  transaction_id   String?
  created_at       DateTime @default(now())

  affiliate affiliates @relation(fields: [affiliate_id], references: [id])
  referral  users?     @relation("affiliate_commission_referral", fields: [referral_user_id], references: [id])

  @@index([affiliate_id])
  @@index([status])
}

model affiliate_payouts {
  id           String   @id @default(uuid())
  affiliate_id String
  amount       Decimal
  method       String   // e.g., Bitcoin, USDT, Bank
  status       String   @default("Pending") // Pending, Approved, Rejected, Paid
  requested_at DateTime @default(now())
  processed_at DateTime?
  note         String?

  affiliate affiliates @relation(fields: [affiliate_id], references: [id])

  @@index([affiliate_id])
  @@index([status])
}

// ------------------ End Affiliate Program Additions -------------------
