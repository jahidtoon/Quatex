
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.15.0
 * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
 */
Prisma.prismaVersion = {
  client: "6.15.0",
  engine: "85179d7826409ee107a6ba334b5e305ae3fba9fb"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.Currency_pairsScalarFieldEnum = {
  id: 'id',
  base: 'base',
  quote: 'quote',
  symbol: 'symbol',
  display: 'display',
  provider: 'provider',
  provider_symbol: 'provider_symbol',
  price_decimals: 'price_decimals',
  status: 'status',
  payout: 'payout',
  latest_price: 'latest_price',
  last_updated: 'last_updated',
  isDeleted: 'isDeleted',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Forex_candlesScalarFieldEnum = {
  id: 'id',
  symbol: 'symbol',
  interval: 'interval',
  time: 'time',
  open: 'open',
  high: 'high',
  low: 'low',
  close: 'close',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  name: 'name',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  password_hash: 'password_hash',
  phone: 'phone',
  country: 'country',
  date_of_birth: 'date_of_birth',
  address: 'address',
  city: 'city',
  postal_code: 'postal_code',
  balance: 'balance',
  is_verified: 'is_verified',
  is_admin: 'is_admin',
  is_suspended: 'is_suspended',
  avatar_url: 'avatar_url',
  created_at: 'created_at',
  updated_at: 'updated_at',
  demo_balance: 'demo_balance'
};

exports.Prisma.DepositsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  amount: 'amount',
  method: 'method',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.WithdrawalsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  amount: 'amount',
  method: 'method',
  account_info: 'account_info',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.TradesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  symbol: 'symbol',
  amount: 'amount',
  direction: 'direction',
  open_time: 'open_time',
  close_time: 'close_time',
  result: 'result',
  status: 'status',
  entry_price: 'entry_price',
  payout: 'payout',
  created_at: 'created_at',
  updated_at: 'updated_at',
  account_type: 'account_type'
};

exports.Prisma.LeaderboardScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  amount: 'amount',
  rank: 'rank',
  updated_at: 'updated_at'
};

exports.Prisma.TournamentsScalarFieldEnum = {
  id: 'id',
  title: 'title',
  prize_pool: 'prize_pool',
  entry_fee: 'entry_fee',
  participants: 'participants',
  duration: 'duration',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.Support_messagesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  email: 'email',
  subject: 'subject',
  message: 'message',
  created_at: 'created_at'
};

exports.Prisma.Chat_messagesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  sender: 'sender',
  message: 'message',
  time: 'time'
};

exports.Prisma.SettingsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  notifications: 'notifications',
  private: 'private'
};

exports.Prisma.Crypto_assetsScalarFieldEnum = {
  id: 'id',
  symbol: 'symbol',
  network: 'network',
  display_name: 'display_name',
  contract: 'contract',
  decimals: 'decimals',
  min_deposit: 'min_deposit',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Deposit_sessionsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  crypto_asset_id: 'crypto_asset_id',
  address: 'address',
  derivation_path: 'derivation_path',
  memo_tag: 'memo_tag',
  amount_expected: 'amount_expected',
  fiat_locked_usd: 'fiat_locked_usd',
  rate_source: 'rate_source',
  status: 'status',
  tx_hash: 'tx_hash',
  detected_amount: 'detected_amount',
  confirmations: 'confirmations',
  min_confirmations: 'min_confirmations',
  is_late: 'is_late',
  expires_at: 'expires_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Wallet_ledgerScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  asset: 'asset',
  amount: 'amount',
  meta: 'meta',
  created_at: 'created_at'
};

exports.Prisma.Payment_method_templatesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  type: 'type',
  fields: 'fields',
  currency: 'currency',
  country: 'country',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.P2p_offersScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  side: 'side',
  asset_symbol: 'asset_symbol',
  crypto_asset_id: 'crypto_asset_id',
  fiat_currency: 'fiat_currency',
  price_type: 'price_type',
  fixed_price: 'fixed_price',
  margin_percent: 'margin_percent',
  min_amount_asset: 'min_amount_asset',
  max_amount_asset: 'max_amount_asset',
  min_limit_fiat: 'min_limit_fiat',
  max_limit_fiat: 'max_limit_fiat',
  terms: 'terms',
  auto_reply: 'auto_reply',
  status: 'status',
  total_trades: 'total_trades',
  completion_rate: 'completion_rate',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.User_payment_methodsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  type: 'type',
  label: 'label',
  details: 'details',
  is_verified: 'is_verified',
  is_active: 'is_active',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.P2p_offer_payment_methodsScalarFieldEnum = {
  id: 'id',
  offer_id: 'offer_id',
  payment_method_id: 'payment_method_id'
};

exports.Prisma.P2p_ordersScalarFieldEnum = {
  id: 'id',
  offer_id: 'offer_id',
  maker_id: 'maker_id',
  taker_id: 'taker_id',
  side: 'side',
  asset_symbol: 'asset_symbol',
  fiat_currency: 'fiat_currency',
  price: 'price',
  amount_asset: 'amount_asset',
  amount_fiat: 'amount_fiat',
  status: 'status',
  escrow_held: 'escrow_held',
  escrow_ledger_id: 'escrow_ledger_id',
  reference_code: 'reference_code',
  meta: 'meta',
  expires_at: 'expires_at',
  paid_at: 'paid_at',
  released_at: 'released_at',
  canceled_at: 'canceled_at',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.P2p_messagesScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  sender_id: 'sender_id',
  message: 'message',
  attachments: 'attachments',
  created_at: 'created_at'
};

exports.Prisma.P2p_disputesScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  raised_by_user_id: 'raised_by_user_id',
  reason: 'reason',
  description: 'description',
  status: 'status',
  resolved_by_admin_id: 'resolved_by_admin_id',
  resolution_note: 'resolution_note',
  resolved_at: 'resolved_at',
  attachments: 'attachments',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.P2p_ratingsScalarFieldEnum = {
  id: 'id',
  order_id: 'order_id',
  from_user_id: 'from_user_id',
  to_user_id: 'to_user_id',
  stars: 'stars',
  comment: 'comment',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.PairStatus = exports.$Enums.PairStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  DISABLED: 'DISABLED',
  INACTIVE: 'INACTIVE'
};

exports.DepositSessionStatus = exports.$Enums.DepositSessionStatus = {
  PENDING: 'PENDING',
  DETECTED: 'DETECTED',
  CONFIRMED: 'CONFIRMED',
  PARTIAL: 'PARTIAL',
  EXPIRED: 'EXPIRED',
  LATE_CONFIRMED: 'LATE_CONFIRMED',
  FAILED: 'FAILED'
};

exports.LedgerType = exports.$Enums.LedgerType = {
  DEPOSIT: 'DEPOSIT',
  WITHDRAWAL: 'WITHDRAWAL',
  ADJUST: 'ADJUST',
  P2P_ESCROW_HOLD: 'P2P_ESCROW_HOLD',
  P2P_ESCROW_RELEASE: 'P2P_ESCROW_RELEASE',
  P2P_ESCROW_REFUND: 'P2P_ESCROW_REFUND',
  P2P_FEE: 'P2P_FEE'
};

exports.PaymentMethodType = exports.$Enums.PaymentMethodType = {
  BKASH: 'BKASH',
  NAGAD: 'NAGAD',
  BANK: 'BANK',
  CARDBANK: 'CARDBANK',
  OTHERS: 'OTHERS'
};

exports.P2POrderSide = exports.$Enums.P2POrderSide = {
  BUY: 'BUY',
  SELL: 'SELL'
};

exports.P2POfferStatus = exports.$Enums.P2POfferStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  CLOSED: 'CLOSED'
};

exports.P2PTradeStatus = exports.$Enums.P2PTradeStatus = {
  PENDING: 'PENDING',
  WAITING_PAYMENT: 'WAITING_PAYMENT',
  PAID: 'PAID',
  ESCROW_HELD: 'ESCROW_HELD',
  RELEASED: 'RELEASED',
  CANCELED: 'CANCELED',
  DISPUTED: 'DISPUTED',
  REFUNDED: 'REFUNDED',
  EXPIRED: 'EXPIRED'
};

exports.P2PDisputeStatus = exports.$Enums.P2PDisputeStatus = {
  OPEN: 'OPEN',
  RESOLVED: 'RESOLVED',
  CANCELED: 'CANCELED'
};

exports.Prisma.ModelName = {
  currency_pairs: 'currency_pairs',
  forex_candles: 'forex_candles',
  users: 'users',
  deposits: 'deposits',
  withdrawals: 'withdrawals',
  trades: 'trades',
  leaderboard: 'leaderboard',
  tournaments: 'tournaments',
  support_messages: 'support_messages',
  chat_messages: 'chat_messages',
  settings: 'settings',
  crypto_assets: 'crypto_assets',
  deposit_sessions: 'deposit_sessions',
  wallet_ledger: 'wallet_ledger',
  payment_method_templates: 'payment_method_templates',
  p2p_offers: 'p2p_offers',
  user_payment_methods: 'user_payment_methods',
  p2p_offer_payment_methods: 'p2p_offer_payment_methods',
  p2p_orders: 'p2p_orders',
  p2p_messages: 'p2p_messages',
  p2p_disputes: 'p2p_disputes',
  p2p_ratings: 'p2p_ratings'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
